function updateTopSubjects(sheet) {
  const lastRow = sheet.getLastRow();
  const data = sheet.getRange(2, 1, lastRow - 2, 3).getValues(); // Exclut la dernière ligne
  const subjects = [];

  // Calcul des minutes totales pour chaque matière
  data.forEach(row => {
    const subject = row[0];
    const hours = parseInt(row[1], 10) || 0;
    const minutes = parseInt(row[2], 10) || 0;
    const totalMinutes = hours * 60 + minutes;

    if (subject) {
      subjects.push({ subject, totalMinutes });
    }
  });

  // Tri et affichage des 5 matières les plus étudiées
  subjects.sort((a, b) => b.totalMinutes - a.totalMinutes);
  const topSubjects = subjects.slice(0, 5).map(item => [item.subject, formatTime(item.totalMinutes)]);
  
  // Affiche les résultats à partir de la cellule G3
  sheet.getRange(3, 7, 5, 2).clearContent().setValues(topSubjects);
}

function formatTime(totalMinutes) {
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;
  return `${hours}:${minutes.toString().padStart(2, "0")}`;
}

function onEdit(e) {
  try {
    const sheet = e.source.getActiveSheet();
    const range = e.range;

    if (sheet.getName() === "Feuille 1" && range.getColumn() === 4 && range.getRow() > 1) {
      const newEntry = range.getValue();
      
      if (newEntry !== "") {
        const hoursCell = sheet.getRange(range.getRow(), 2); 
        const minutesCell = sheet.getRange(range.getRow(), 3);
        const timeParts = newEntry.toString().split(":");
        
        if (timeParts.length === 2) {
          const newHours = parseInt(timeParts[0], 10);
          const newMinutes = parseInt(timeParts[1], 10);

          if (isNaN(newHours) || isNaN(newMinutes)) {
            SpreadsheetApp.getUi().alert("Veuillez entrer une durée valide au format hh:mm (par exemple, 2:30).");
            range.setValue("");
            return;
          }

          let currentHours = parseInt(hoursCell.getValue(), 10) || 0;
          let currentMinutes = parseInt(minutesCell.getValue(), 10) || 0;

          currentHours += newHours;
          currentMinutes += newMinutes;

          if (currentMinutes >= 60) {
            const extraHours = Math.floor(currentMinutes / 60);
            currentMinutes %= 60;
            currentHours += extraHours;
          }

          hoursCell.setValue(currentHours);
          minutesCell.setValue(currentMinutes);
          range.setValue("");
          
          updateTopSubjects(sheet);
          updateTotalInLastCell(); // Appel de la fonction updateTotal ici
        } else {
          SpreadsheetApp.getUi().alert("Veuillez entrer une durée au format hh:mm (par exemple, 2:30).");
          range.setValue("");
        }
      }
    }
  } catch (error) {
    SpreadsheetApp.getUi().alert("Une erreur est survenue : " + error.message);
  }
}

function updateTotalInLastCell() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const lastRow = sheet.getLastRow();

  if (lastRow < 3) return;

  const hoursRange = sheet.getRange(2, 2, lastRow - 2);
  const minutesRange = sheet.getRange(2, 3, lastRow - 2);

  const hoursData = hoursRange.getValues().flat();
  const minutesData = minutesRange.getValues().flat();

  let totalHours = 0;
  let totalMinutes = 0;

  hoursData.forEach(hour => {
    totalHours += parseInt(hour, 10) || 0;
  });

  minutesData.forEach(minute => {
    totalMinutes += parseInt(minute, 10) || 0;
  });

  const additionalHours = Math.floor(totalMinutes / 60);
  totalMinutes = totalMinutes % 60;
  totalHours += additionalHours;

  const totalCell = sheet.getRange(lastRow, 4);
  totalCell.setValue(`${totalHours}:${totalMinutes.toString().padStart(2, "0")}`);
}

